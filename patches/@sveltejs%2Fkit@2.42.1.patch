diff --git a/src/runtime/client/client.js b/src/runtime/client/client.js
index 75294d5a0aea92dd1b5c4861d72ca19c40c5a532..d6ef3b79ec10e78b728a6af322064bac0f6d0ec7 100644
--- a/src/runtime/client/client.js
+++ b/src/runtime/client/client.js
@@ -2793,10 +2793,6 @@ async function _hydrate(
  */
 async function load_data(url, invalid) {
 	const data_url = new URL(url);
-	data_url.pathname = add_data_suffix(url.pathname);
-	if (url.pathname.endsWith('/')) {
-		data_url.searchParams.append(TRAILING_SLASH_PARAM, '1');
-	}
 	if (DEV && url.searchParams.has(INVALIDATED_PARAM)) {
 		throw new Error(`Cannot used reserved query parameter "${INVALIDATED_PARAM}"`);
 	}
@@ -2804,7 +2800,11 @@ async function load_data(url, invalid) {
 
 	// use window.fetch directly to allow using a 3rd party-patched fetch implementation
 	const fetcher = DEV ? dev_fetch : window.fetch;
-	const res = await fetcher(data_url.href, {});
+	const res = await fetcher(data_url.href, {
+        headers: {
+            'accept': 'application/json'
+        }
+    });
 
 	if (!res.ok) {
 		// error message is a JSON-stringified string which devalue can't handle at the top level
diff --git a/src/runtime/server/page/render.js b/src/runtime/server/page/render.js
index b9a9ffc4669c046eefaedea50d387774b06a3d52..85e401c91995d7268038a9a1de7a4d90098cc92c 100644
--- a/src/runtime/server/page/render.js
+++ b/src/runtime/server/page/render.js
@@ -542,7 +542,6 @@ export async function render_response({
 	}
 
 	const headers = new Headers({
-		'x-sveltekit-page': 'true',
 		'content-type': 'text/html'
 	});
 
diff --git a/src/runtime/server/respond.js b/src/runtime/server/respond.js
index e162a0f894cc3a1daf622026937dd0b6f927a95c..e52bc98cb5545e521b637683426faa570bb01697 100644
--- a/src/runtime/server/respond.js
+++ b/src/runtime/server/respond.js
@@ -71,8 +71,8 @@ export async function internal_respond(request, options, manifest, state) {
 	const url = new URL(request.url);
 
 	const is_route_resolution_request = has_resolution_suffix(url.pathname);
-	const is_data_request = has_data_suffix(url.pathname);
-	const remote_id = get_remote_id(url);
+    const is_data_request = request.method === 'GET' && request.headers.get('accept') === 'application/json';
+    const remote_id = get_remote_id(url);
 
 	if (!DEV) {
 		const request_origin = request.headers.get('origin');
@@ -119,10 +119,6 @@ export async function internal_respond(request, options, manifest, state) {
 		 */
 		url.pathname = strip_resolution_suffix(url.pathname);
 	} else if (is_data_request) {
-		url.pathname =
-			strip_data_suffix(url.pathname) +
-				(url.searchParams.get(TRAILING_SLASH_PARAM) === '1' ? '/' : '') || '/';
-		url.searchParams.delete(TRAILING_SLASH_PARAM);
 		invalidated_data_nodes = url.searchParams
 			.get(INVALIDATED_PARAM)
 			?.split('')
